import { type NextPage } from "next";
import Head from "next/head";
import { Formik, Form, Field } from "formik";
import {
  Box,
  Button,
  Checkbox,
  Container,
  Divider,
  FormControl,
  FormLabel,
  Heading,
  HStack,
  Input,
  Stack,
  Text,
} from "@chakra-ui/react";

import { api } from "@/utils/api";
import NumberInputControl from "@/components/ui/number-input-control";
import InputControl from "@/components/ui/input-control";
import { NextPageWithLayout } from "@/pages/_app";
import VendorProvider from "@/components/provider/VendorProvider";
import { toFormikValidationSchema } from "zod-formik-adapter";
import candySchema from "@/utils/schemas/candy";

const CreateCandy: NextPageWithLayout = () => {
  const { mutate, isLoading } = api.candy.create.useMutation({
    onSuccess() {
      alert("created");
    },
    onError() {
      alert("not created");
    },
  });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container
          maxW="lg"
          py={{ base: "12", md: "24" }}
          px={{ base: "0", sm: "8" }}
        >
          <Stack spacing="8">
            <Stack spacing="6">
              <Stack spacing={{ base: "2", md: "3" }} textAlign="center">
                <Heading size={{ base: "xs", md: "sm" }}>
                  Log in to your vendor account
                </Heading>
                <HStack spacing="1" justify="center">
                  <Text color="fg.muted">Do not have an account?</Text>
                  <Button variant="text" size="lg">
                    Sign up
                  </Button>
                </HStack>
              </Stack>
            </Stack>
            <Box
              py={{ base: "0", sm: "8" }}
              px={{ base: "4", sm: "10" }}
              bg={{ base: "transparent", sm: "bg.surface" }}
              boxShadow={{ base: "none", sm: "md" }}
              borderRadius={{ base: "none", sm: "xl" }}
            >
              <Formik
                initialValues={{
                  name: "Snickers",
                  description:
                    "A delicious candy bar with peanuts, caramel, and nougat.",
                  price: 20,
                  quantity: 100,
                }}
                validationSchema={toFormikValidationSchema(candySchema)}
                onSubmit={(values) => {
                  mutate({
                    ...values,
                  });
                }}
              >
                {({ isSubmitting, isValid, dirty, values, errors }) => (
                  <Form>
                    {JSON.stringify(values)}
                    {JSON.stringify(errors)}

                    {/* <Field as={Input} name="name" placeholder="Name" />
                    <Field as={Input} name="description" placeholder="Name" /> */}
                    <InputControl name="name" label="Name" placeholder="Name" />
                    <InputControl
                      name="description"
                      label="Description"
                      placeholder="Name"
                    />

                    <NumberInputControl name="price" label="Price" />
                    <NumberInputControl name="quantity" label="Quantity" />

                    <Button type="submit">Create</Button>
                  </Form>
                )}
              </Formik>
            </Box>
          </Stack>
        </Container>
      </main>
    </>
  );
};

CreateCandy.getLayout = (page) => <VendorProvider>{page}</VendorProvider>;

export default CreateCandy;
