import { type NextPage } from "next";
import Head from "next/head";

import { api } from "@/utils/api";
import {
  List,
  Heading,
  ListItem,
  Text,
  Button,
  useDisclosure,
  Input,
} from "@chakra-ui/react";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import {
  addCandyToCart,
  clearCart,
  removeCandyFromCart,
} from "@/store/modules/cart";
import { Role } from "@/utils/types/user";
import { Field, Form, Formik } from "formik";
import SelectControl from "@/components/ui/select-control";
import { useState } from "react";
import { Coupon } from "@/server/models/coupon.model";
// import PaymentModal from "@/components/payment-modal";

const Cart: NextPage = () => {
  const dispatch = useAppDispatch();
  const cartItems = useAppSelector((state) => state.cart.items);
  const cartValue = useAppSelector((state) => state.cart.value);
  const cartPrice = useAppSelector((state) => state.cart.price);

  const { mutate: createOrder, isLoading } = api.order.create.useMutation({
    onSuccess() {
      // dispatch(clearCart());
      alert("placed order");
      // router.replace("/store");
    },
  });

  const { mutate: createCoupon } = api.coupon.create.useMutation({
    onSuccess() {
      // dispatch(clearCart());
      alert("created coupon");
      // router.replace("/store");
    },
  });

  const { data, isLoading: isBanksLoading } = api.bank.getAll.useQuery({});

  const { isLoading: isUserLoading, data: user } = api.auth.user.useQuery();

  const { mutateAsync: validateCoupon, isLoading: isCouponValidationLoading } =
    api.coupon.validate.useMutation({});

  // const { isOpen, onOpen, onClose } = useDisclosure();
  const [appliedCoupon, setAppliedCoupon] = useState<Coupon | null>(null);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {cartValue > 0 ? (
          <>
            <Heading>Your cart ({cartValue})</Heading>
            <List spacing={2}>
              {cartItems.map((candy) => (
                <ListItem key={candy._id}>
                  <Text>Name: {candy.name}</Text>
                  <Text>Description: {candy.description}</Text>
                  <Text>Number of items: {candy.itemsInCart}</Text>
                  <Text>Price: {candy.price}</Text>
                </ListItem>
              ))}
            </List>
            <Text>Total: {cartPrice}</Text>

            {appliedCoupon && (
              <>
                <Text>
                  Discount value:{" "}
                  {Math.round(cartPrice * (appliedCoupon.discount / 100))}
                </Text>
                <Text>
                  Total after discount:{" "}
                  {Math.round(cartPrice * (1 - appliedCoupon.discount / 100))}
                </Text>
              </>
            )}

            <Button onClick={() => createCoupon({})}>Create coupon</Button>

            {!isUserLoading &&
              (user!.role === Role.User ? (
                <Button
                  onClick={() => {
                    const items = [] as {
                      candy: string;
                      itemsInCart: number;
                    }[];

                    cartItems.forEach(({ _id, itemsInCart }) => {
                      items.push({
                        candy: _id,
                        itemsInCart,
                      });
                    });

                    createOrder({
                      items,
                    });
                  }}
                >
                  Place order
                </Button>
              ) : (
                <>Login as user</>
              ))}

            {!isBanksLoading && (
              <Formik
                initialValues={{
                  code: "",
                  bank: "",
                }}
                onSubmit={async (values) => {
                  try {
                    const { coupon } = await validateCoupon(values);
                    setAppliedCoupon(coupon);
                    alert(`coupon ${coupon.name} applied`);
                  } catch (err) {
                    const error = err as any;
                    alert(JSON.stringify(error.shape.message));
                  }
                }}
              >
                {({ values }) => (
                  <Form>
                    {JSON.stringify(values, null, 4)}
                    <SelectControl
                      label="Select Bank"
                      name="bank"
                      selectProps={{ placeholder: "Select Bank" }}
                    >
                      {data?.banks.map((bank) => (
                        <option key={bank._id} value={bank._id}>
                          {bank.name}
                        </option>
                      ))}
                    </SelectControl>
                    <Field as={Input} name="code" placeholder="Coupon" />

                    <Button type="submit">Use this payment method</Button>
                  </Form>
                )}
              </Formik>
            )}
          </>
        ) : (
          <Heading>Your cart is empty</Heading>
        )}
      </main>
    </>
  );
};

export default Cart;
